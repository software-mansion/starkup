name: Check

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string

jobs:
  test-legacy-asdf:
    name: test ${{ inputs.os }} (legacy asdf)
    env:
      ASDF_VERSION: v0.15.0
    runs-on: ${{ inputs.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup legacy asdf
        uses: asdf-vm/actions/setup@v3
        with:
          asdf_branch: ${{ env.ASDF_VERSION }}

      - name: Fetch latest Scarb version from GitHub releases
        id: scarb_version
        run: |
          # TODO(maciektr): remove this function and install latest scarb version
          echo "LATEST=2.9.3" >> $GITHUB_OUTPUT

      - name: Fetch latest Starknet Foundry version from GitHub releases
        id: snfoundry_version
        run: |
          latest_version=$(curl -s --fail https://api.github.com/repos/foundry-rs/starknet-foundry/releases/latest | grep \"tag_name\": | awk '{print $2}' | tr -d 'v",')
          echo "Latest Starknet Foundry version found is $latest_version"
          echo "LATEST=$latest_version" >> $GITHUB_OUTPUT

      - name: Fetch latest Universal Sierra Compiler version from GitHub releases
        id: usc_version
        run: |
          latest_version=$(curl -s --fail https://api.github.com/repos/software-mansion/universal-sierra-compiler/releases/latest | grep \"tag_name\": | awk '{print $2}' | tr -d 'v",')
          echo "Latest Universal Sierra Compiler version found is $latest_version"
          echo "LATEST=$latest_version" >> $GITHUB_OUTPUT

      - name: Fetch latest Cairo Coverage version from GitHub releases
        id: coverage_version
        run: |
          latest_version=$(curl -s --fail https://api.github.com/repos/software-mansion/cairo-coverage/releases/latest | grep \"tag_name\": | awk '{print $2}' | tr -d 'v",')
          echo "Latest Cairo Coverage version found is $latest_version"
          echo "LATEST=$latest_version" >> $GITHUB_OUTPUT

      - name: Fetch latest Cairo Profiler version from GitHub releases
        id: profiler_version
        run: |
          latest_version=$(curl -s --fail https://api.github.com/repos/software-mansion/cairo-profiler/releases/latest | grep \"tag_name\": | awk '{print $2}' | tr -d 'v",')
          echo "Latest Cairo Profiler version found is $latest_version"
          echo "LATEST=$latest_version" >> $GITHUB_OUTPUT

      - name: Run starkup
        run: ./starkup.sh

      - name: Check Scarb latest
        run: scarb --version | grep "scarb ${{ steps.scarb_version.outputs.LATEST }}"

      - name: Check Starknet Foundry latest
        run: |
          snforge --version | grep "snforge ${{ steps.snfoundry_version.outputs.LATEST }}"
          sncast --version | grep "sncast ${{ steps.snfoundry_version.outputs.LATEST }}"

      - name: Check Universal Sierra Compiler latest
        run: universal-sierra-compiler --version | grep "universal-sierra-compiler ${LATEST}"

      - name: Check Cairo Coverage latest
        run: cairo-coverage --version | grep "cairo-coverage ${{ steps.coverage_version.outputs.LATEST }}"

      - name: Check Cairo Profiler latest
        run: cairo-profiler --version | grep "cairo-profiler ${{ steps.profiler_version.outputs.LATEST }}"

  test:
    name: test ${{ inputs.os }}
    env:
      ASDF_VERSION: v0.16.2
    runs-on: ${{ inputs.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Fetch latest Scarb version from GitHub releases
        id: scarb_version
        run: |
          # TODO(maciektr): remove this function and install latest scarb version
          echo "LATEST=2.9.3" >> $GITHUB_OUTPUT

      - name: Fetch latest Starknet Foundry version from GitHub releases
        id: snfoundry_version
        run: |
          latest_version=$(curl -s --fail https://api.github.com/repos/foundry-rs/starknet-foundry/releases/latest | grep \"tag_name\": | awk '{print $2}' | tr -d 'v",')
          echo "Latest Starknet Foundry version found is $latest_version"
          echo "LATEST=$latest_version" >> $GITHUB_OUTPUT

      - name: Fetch latest Universal Sierra Compiler version from GitHub releases
        id: usc_version
        run: |
          latest_version=$(curl -s --fail https://api.github.com/repos/software-mansion/universal-sierra-compiler/releases/latest | grep \"tag_name\": | awk '{print $2}' | tr -d 'v",')
          echo "Latest Universal Sierra Compiler version found is $latest_version"
          echo "LATEST=$latest_version" >> $GITHUB_OUTPUT

      - name: Fetch latest Cairo Coverage version from GitHub releases
        id: coverage_version
        run: |
          latest_version=$(curl -s --fail https://api.github.com/repos/software-mansion/cairo-coverage/releases/latest | grep \"tag_name\": | awk '{print $2}' | tr -d 'v",')
          echo "Latest Cairo Coverage version found is $latest_version"
          echo "LATEST=$latest_version" >> $GITHUB_OUTPUT

      - name: Fetch latest Cairo Profiler version from GitHub releases
        id: profiler_version
        run: |
          latest_version=$(curl -s --fail https://api.github.com/repos/software-mansion/cairo-profiler/releases/latest | grep \"tag_name\": | awk '{print $2}' | tr -d 'v",')
          echo "Latest Cairo Profiler version found is $latest_version"
          echo "LATEST=$latest_version" >> $GITHUB_OUTPUT

      - name: Run starkup
        shell: bash
        env:
          SHELL: /bin/bash
        run: |
          ./starkup.sh -y
          echo "${ASDF_DATA_DIR:-$HOME/.asdf}/shims" >> $GITHUB_PATH

      - name: Check Scarb latest
        run: scarb --version | grep "scarb ${{ steps.scarb_version.outputs.LATEST }}"

      - name: Check Starknet Foundry latest
        run: |
          snforge --version | grep "snforge ${{ steps.snfoundry_version.outputs.LATEST }}"
          sncast --version | grep "sncast ${{ steps.snfoundry_version.outputs.LATEST }}"

      - name: Check Universal Sierra Compiler latest
        run: universal-sierra-compiler --version | grep "universal-sierra-compiler ${LATEST}"

      - name: Check Cairo Coverage latest
        run: cairo-coverage --version | grep "cairo-coverage ${{ steps.coverage_version.outputs.LATEST }}"

      - name: Check Cairo Profiler latest
        run: cairo-profiler --version | grep "cairo-profiler ${{ steps.profiler_version.outputs.LATEST }}"

  test-asdf-update:
    name: test ${{ inputs.os }} (update asdf)
    env:
      ASDF_VERSION: v0.16.0
    runs-on: ${{ inputs.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Fetch latest asdf version from GitHub releases
        id: asdf_version
        run: |
          latest_version=$(curl -s --fail https://api.github.com/repos/asdf-vm/asdf/releases/latest | grep \"tag_name\": | awk '{print $2}' | tr -d '",')
          echo "Latest asdf version found is $latest_version"
          echo "LATEST=$latest_version" >> $GITHUB_OUTPUT

      - name: Setup outdated asdf
        run: |
          if [ "${{ runner.os }}" = "Linux" ]; then
            ASDF_PLATFORM="linux-amd64"
          else
            ASDF_PLATFORM="darwin-arm64"
          fi
          mkdir -p "$HOME/.local/bin"
          curl -fsSL "https://github.com/asdf-vm/asdf/releases/download/${ASDF_VERSION}/asdf-${ASDF_VERSION}-${ASDF_PLATFORM}.tar.gz" | tar xzf - -C "$HOME/.local/bin"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "${ASDF_DATA_DIR:-$HOME/.asdf}/shims" >> $GITHUB_PATH

      - name: Check asdf out-of-date
        shell: bash
        run: asdf --version | grep "$ASDF_VERSION"

      - name: Run starkup
        shell: bash
        env:
          SHELL: /bin/bash
        run: ./starkup.sh -y

      - name: Check asdf latest
        shell: bash
        run: asdf --version | grep "${{ steps.asdf_version.outputs.LATEST }}"
